Y is a subclass of X, xa is an array of X's, ya is an array of Y's.

1. at compile time, xa=ya is valid. ya=xa is not valid, ya=(Y[]) is needed.
2. at run time, ya=xa is not valid, ya=(Y[]) is not valid.
3. if xa reference of the array of class Y, ya=(Y[])xa is valid, ya=xa will have compile error.

part II

1. java compile if the interface contains a method with the same name and prototype as the superclass.
2. if the return type is different in interface, compile error.
3. if the parameter type is different in interface, compile error.
4. if the parameter name is different, compile okay.

if If you are creating methods in interface, they will always be public and abstract. Abstract methods are declaration only and it will not have implementation. It will not have a method body. A Java class containing an abstract class must be declared as abstract class.

Java interface versus abstract class
An interface differs from an abstract class because an interface is not a class. An interface is essentially a type that can be satisfied by any class that implements the interface. 
Any class that implements an interface must satisfy 2 conditions: 
*It must have the phrase "implements Interface_Name" at the beginning of the class definiton.
*It must implement all of the method headings listed in the interface definition.

part III

1. Java doesn't compile the code because the two cosntant with same name are ambiguous, and same value or different doesn't matter

2. Java doesn't compile the code because the two cosntant with same name are ambiguous, and same value or different doesn't matter

3. modify the constant with superclass.list or disp.list.

part IV

1. If static type and dynamic class are both sublcass, then the output is still subclass method, even with cast.

2. If no cast, output is superclass. if casted with subclass, runtime error.

3. There is no way to tell Java not to call superclass! you only have the freedom to decide which superclass are going to be called at the beginning.

Overriding and Hiding Methods:

An instance method (not static method) in a subclss with the same signature (name, number and the type of its parameters) and return type as an instance method in the superclass overrides the superclass's method.

If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass.
The distinction between hiding a static method and overriding an instance method has important implications:
The version of the overridden instance method that gets invoked is the one in the subclass.
The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.
Consider an example that contains two classes. The first is Animal, which contains one instance method and one static method:
public class Animal {
    public static void testClassMethod() {
        System.out.println("The static method in Animal");
    }
    public void testInstanceMethod() {
        System.out.println("The instance method in Animal");
    }
}
The second class, a subclass of Animal, is called Cat:
public class Cat extends Animal {
    public static void testClassMethod() {
        System.out.println("The static method in Cat");
    }
    public void testInstanceMethod() {
        System.out.println("The instance method in Cat");
    }

    public static void main(String[] args) {
        Cat myCat = new Cat();
        Animal myAnimal = myCat;
        Animal.testClassMethod();
        myAnimal.testInstanceMethod();
    }
}
The Cat class overrides the instance method in Animal and hides the static method in Animal. The main method in this class creates an instance of Cat and invokes testClassMethod() on the class and testInstanceMethod() on the instance.
The output from this program is as follows:
The static method in Animal
The instance method in Cat
As promised, the version of the hidden static method that gets invoked is the one in the superclass, and the version of the overridden instance method that gets invoked is the one in the subclass.


Interface Methods
============================
You specify that a method definition in an interface is a default method with the default keyword at the beginning of the method signature. All method declarations in an interface, including default methods, are implicitly public, so you can omit the public modifier.

An abstract class is a class that is declared abstracit-it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed.

An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon), like this:
abstract void moveTo(double deltaX, double deltaY);


If a class includes abstract methods, then the class itself must be declared abstract, as in:
public abstract class GraphicObject {
   // declare fields
   // declare nonabstract methods
   abstract void draw();
}

When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract.

Abstract classes are similar to interfaces. You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, whereas you can implement any number of interfaces.

Default methods and abstract methods in interfaces are inherited like instance methods. However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. These rules are driven by the following two principles:
****Instance methods are preferred over interface default methods.

public class Horse {
    public String identifyMyself() {
        return "I am a horse.";
    }
}
public interface Flyer {
    default public String identifyMyself() {
        return "I am able to fly.";
    }
}
public interface Mythical {
    default public String identifyMyself() {
        return "I am a mythical creature.";
    }
}
public class Pegasus extends Horse implements Flyer, Mythical {
    public static void main(String... args) {
        Pegasus myApp = new Pegasus();
        System.out.println(myApp.identifyMyself());
    }
}
The method Pegasus.identifyMyself returns the string I am a horse



****Methods that are already overridden by other candidates are ignored. This circumstance can arise when supertypes share a common ancestor.

public interface Animal {
    default public String identifyMyself() {
        return "I am an animal.";
    }
}
public interface EggLayer extends Animal {
    default public String identifyMyself() {
        return "I am able to lay eggs.";
    }
}
public interface FireBreather extends Animal { }
public class Dragon implements EggLayer, FireBreather {
    public static void main (String... args) {
        Dragon myApp = new Dragon();
        System.out.println(myApp.identifyMyself());
    }
}
The method Dragon.identifyMyself returns the string I am able to lay eggs.